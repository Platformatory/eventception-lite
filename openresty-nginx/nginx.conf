user  nginx;
worker_processes  auto;

load_module /etc/nginx/modules/ngx_http_kafka_log_module.so;

events {
    worker_connections  1024;
}

http {
    kafka_log_kafka_brokers broker:9092;
    kafka_log_kafka_client_id nginx-orders;
    kafka_log_kafka_compression snappy;
    kafka_log_kafka_log_level 7;

    proxy_buffers 16 16k;
    proxy_buffer_size 16k;
    client_max_body_size 16M;

    lua_package_path "/usr/local/lib/lua/?.lua;;";

    # Enable response body capture
    init_by_lua_block {
        cjson = require "cjson"
    }

    server {
        listen 80;

        location /users {
            proxy_pass http://httpbin.org/anything;

            # Capture full request/response details
            client_body_buffer_size 10M;
            client_max_body_size 10M;
            proxy_pass_request_headers on;
            proxy_pass_request_body on;

            rewrite_by_lua_block {
                -- Read and store request body
                ngx.req.read_body()
                ngx.ctx.request_body = ngx.req.get_body_data() or ""
            }

            body_filter_by_lua_block {
                ngx.ctx.resp_body = (ngx.ctx.resp_body or "") .. (ngx.arg[1] or "")
            }

            log_by_lua_block {
                -- Capture response status
                local resp_status = ngx.status

                -- Get headers
                local req_headers = ngx.req.get_headers()
                local resp_headers = ngx.resp.get_headers()

                -- Encode as JSON
                local log_data = cjson.encode({
                    request = {
                        method = ngx.req.get_method(),
                        path = ngx.var.request_uri,
                        headers = req_headers,
                        body = ngx.ctx.request_body
                    },
                    response = {
                        status = resp_status,
                        headers = resp_headers,
                        body = ngx.ctx.resp_body
                    }
                })

                -- Store log data in a variable for Kafka logging
                ngx.var.log_data = log_data
            }

            set_by_lua_block $log_data {
                return ngx.ctx.log_data or "{}"
            }

            # Kafka log
            kafka_log kafka:api-logs-users $log_data $request_id;
        }
    }
}
